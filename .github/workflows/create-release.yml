name: Create Release
on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  check-release-tag:
    runs-on: ubuntu-latest
    outputs:
      latest_release_tag: ${{ steps.latest_release_tag.outputs.latest_release_tag }}
      latest_tag: ${{ steps.latest_tag.outputs.latest_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get latest release
        id: get_latest_release
        uses: octokit/request-action@v2.x
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          route: GET /repos/{repo}/releases/latest
          repo: ${{ github.repository }}
      - name: Set latest release tag
        id: latest_release_tag
        run: |
          echo "latest_release_tag=${{ fromJson(steps.get_latest_release.outputs.data).tag_name }}" >> "$GITHUB_OUTPUT"
          echo "The latest release tag is $latest_release_tag"
      - name: Set latest tag
        id: latest_tag
        run: |
          latest_tag=$( git describe --tags "$(git rev-list --tags --max-count=1)" )
          echo "The latest tag is $latest_tag"
          echo "latest_tag=$latest_tag" >> "$GITHUB_OUTPUT"
  create-release:
    runs-on: ubuntu-latest
    needs: check-release-tag
    if: ${{ needs.check-release-tag.outputs.latest_release_tag != needs.check-release-tag.outputs.latest_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: delete tag
        run: |
          git push origin --delete ${{ needs.check-release-tag.outputs.latest_tag }}
      - name: Create Release
        uses: octokit/request-action@v2.x
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          route: POST /repos/{repo}/releases
          repo: ${{ github.repository }}
          tag_name: ${{ needs.check-release-tag.outputs.latest_tag }}
          target_commitish: main
          name: ${{ needs.check-release-tag.outputs.latest_tag }}
          generate_release_notes: true
